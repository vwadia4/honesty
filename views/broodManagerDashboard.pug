<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Young4ChickS - Brooder Manager Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .header {
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
            color: white;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        
        .header h1 {
            font-size: 2.2em;
            margin-bottom: 5px;
            font-weight: 700;
        }
        
        .header p {
            opacity: 0.9;
            font-size: 1.1em;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .nav-tabs {
            background: white;
            border-radius: 10px;
            padding: 10px;
            margin-bottom: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .tab-btn {
            padding: 12px 20px;
            background: #f8f9fa;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            color: #495057;
            transition: all 0.3s ease;
            flex: 1;
            min-width: 150px;
        }
        
        .tab-btn.active {
            background: #007bff;
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,123,255,0.3);
        }
        
        .tab-btn:hover {
            background: #e9ecef;
            transform: translateY(-1px);
        }
        
        .tab-btn.active:hover {
            background: #0056b3;
        }
        
        .content {
            display: none;
            animation: fadeIn 0.5s ease-in;
        }
        
        .content.active {
            display: block;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
            border-top: 5px solid #007bff;
            transition: transform 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
        }
        
        .stat-number {
            font-size: 2.5em;
            font-weight: 700;
            color: #007bff;
            margin-bottom: 5px;
        }
        
        .stat-label {
            color: #6c757d;
            font-weight: 600;
            font-size: 0.9em;
        }
        
        .cards-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
        }
        
        .card h3 {
            color: #333;
            margin-bottom: 20px;
            font-size: 1.3em;
            padding-bottom: 10px;
            border-bottom: 2px solid #f8f9fa;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #555;
        }
        
        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }
        
        .form-group input:focus, .form-group select:focus, .form-group textarea:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 3px rgba(0,123,255,0.1);
        }
        
        .btn {
            background: linear-gradient(135deg, #007bff, #0056b3);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            margin-right: 10px;
            margin-bottom: 10px;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,123,255,0.3);
        }
        
        .btn-success {
            background: linear-gradient(135deg, #28a745, #20c997);
        }
        
        .btn-danger {
            background: linear-gradient(135deg, #dc3545, #c82333);
        }
        
        .btn-warning {
            background: linear-gradient(135deg, #ffc107, #fd7e14);
            color: #333;
        }
        
        .btn-secondary {
            background: linear-gradient(135deg, #6c757d, #5a6268);
        }
        
        .table-container {
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        
        .table-header {
            padding: 20px;
            background: #f8f9fa;
            border-bottom: 2px solid #e9ecef;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .table-header h3 {
            margin: 0;
            color: #495057;
        }
        
        .table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .table th, .table td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #e9ecef;
        }
        
        .table th {
            background: #f8f9fa;
            font-weight: 600;
            color: #495057;
        }
        
        .table tbody tr:hover {
            background: #f8f9fa;
        }
        
        .status-badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 11px;
            font-weight: 600;
            text-transform: uppercase;
        }
        
        .status-pending {
            background: #fff3cd;
            color: #856404;
        }
        
        .status-approved {
            background: #d1ecff;
            color: #0c5460;
        }
        
        .status-completed {
            background: #d4edda;
            color: #155724;
        }
        
        .status-cancelled {
            background: #f8d7da;
            color: #721c24;
        }
        
        .alert {
            padding: 15px 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            border-left: 5px solid;
        }
        
        .alert-info {
            background: #d1ecf1;
            border-color: #17a2b8;
            color: #0c5460;
        }
        
        .alert-success {
            background: #d4edda;
            border-color: #28a745;
            color: #155724;
        }
        
        .pending-request {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 15px;
            border-left: 4px solid #ffc107;
        }
        
        .pending-request h4 {
            color: #495057;
            margin-bottom: 10px;
        }
        
        .pending-request p {
            margin: 5px 0;
            color: #6c757d;
        }
        
        .pending-request .actions {
            margin-top: 15px;
            display: flex;
            gap: 10px;
        }
        
        .report-filters {
            background: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        
        .filters-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 15px;
        }
        
        .feed-allocation {
            background: #e3f2fd;
            padding: 15px;
            border-radius: 8px;
            margin-top: 15px;
            border-left: 4px solid #2196f3;
        }
        
        @media (max-width: 768px) {
            .nav-tabs {
                flex-direction: column;
            }
            
            .tab-btn {
                min-width: auto;
            }
            
            .stats-grid, .cards-grid {
                grid-template-columns: 1fr;
            }
            
            .filters-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üê£ Young4ChickS - Brooder Manager Dashboard</h1>
        <p>Urban Brooder Management System | Empowering Youth (18-30) in Poultry Farming</p>
    </div>

    <div class="container">
        <!-- Navigation Tabs -->
        <div class="nav-tabs">
            <button class="tab-btn active" onclick="showTab('dashboard')">üìä Dashboard</button>
            <button class="tab-btn" onclick="showTab('requests')">üìã Chick Requests</button>
            <button class="tab-btn" onclick="showTab('stock')">üì¶ Chick Stock</button>
            <button class="tab-btn" onclick="showTab('feeds')">üåæ Feed Management</button>
            <button class="tab-btn" onclick="showTab('farmers')">üë®‚Äçüåæ Farmers</button>
            <button class="tab-btn" onclick="showTab('reports')">üìà Reports</button>
        </div>

        <!-- Dashboard Tab -->
        <div id="dashboard" class="content active">
            <div class="alert alert-info">
                <strong>Manager Dashboard Overview</strong> - Monitor your brooder operations and key metrics
            </div>

            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number" id="total-chick-stock">0</div>
                    <div class="stat-label">Total Chicks in Stock</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="total-feed-bags">0</div>
                    <div class="stat-label">Feed Bags Available</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="pending-requests-count">0</div>
                    <div class="stat-label">Pending Requests</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="total-farmers">0</div>
                    <div class="stat-label">Registered Farmers</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="monthly-revenue">0</div>
                    <div class="stat-label">Monthly Revenue (UGX)</div>
                </div>
            </div>

            <div class="cards-grid">
                <div class="card">
                    <h3>üìã Recent Activity</h3>
                    <div id="recent-activity">
                        <p style="color: #6c757d;">No recent activity</p>
                    </div>
                </div>
                
                <div class="card">
                    <h3>‚ö†Ô∏è Low Stock Alerts</h3>
                    <div id="low-stock-alerts">
                        <p style="color: #6c757d;">All stock levels normal</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Chick Requests Tab -->
        <div id="requests" class="content">
            <div class="alert alert-info">
                <strong>Chick Requests Management</strong> - Review, approve, or cancel farmer requests
            </div>

            <div class="card">
                <h3>üîî Pending Requests</h3>
                <div id="pending-requests-list">
                    <p style="color: #6c757d;">No pending requests</p>
                </div>
            </div>

            <div class="table-container">
                <div class="table-header">
                    <h3>All Chick Requests</h3>
                    <button class="btn btn-secondary" onclick="exportRequestsCSV()">Export CSV</button>
                </div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Request ID</th>
                            <th>Farmer Name</th>
                            <th>Phone</th>
                            <th>Farmer Type</th>
                            <th>Chick Type</th>
                            <th>Quantity</th>
                            <th>Status</th>
                            <th>Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="requests-table">
                        <tr>
                            <td colspan="9" style="text-align: center; color: #6c757d;">No requests found</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Chick Stock Tab -->
        <div id="stock" class="content">
            <div class="alert alert-info">
                <strong>Chick Stock Management</strong> - Add and manage your chick inventory
            </div>

            <div class="cards-grid">
                <div class="card">
                    <h3>‚ûï Add New Chick Stock</h3>
                    <form id="chick-stock-form">
                        <div class="form-group">
                            <label>Chick Type</label>
                            <select id="chick-type" required>
                                <option value="">Select Chick Type</option>
                                <option value="layers-local">Layers (Local)</option>
                                <option value="layers-exotic">Layers (Exotic)</option>
                                <option value="broilers-local">Broilers (Local)</option>
                                <option value="broilers-exotic">Broilers (Exotic)</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Number of Chicks</label>
                            <input type="number" id="chick-quantity" min="1" required>
                        </div>
                        <div class="form-group">
                            <label>Age in Days</label>
                            <input type="number" id="chick-age" min="0" max="365" required>
                        </div>
                        <div class="form-group">
                            <label>Batch Notes (Optional)</label>
                            <textarea id="chick-notes" rows="3" placeholder="Any additional notes about this batch"></textarea>
                        </div>
                        <button type="submit" class="btn">Add to Stock</button>
                    </form>
                </div>

                <div class="card">
                    <h3>üìä Stock Summary</h3>
                    <div id="stock-summary">
                        <p><strong>Layers (Local):</strong> <span id="layers-local-count">0</span> chicks</p>
                        <p><strong>Layers (Exotic):</strong> <span id="layers-exotic-count">0</span> chicks</p>
                        <p><strong>Broilers (Local):</strong> <span id="broilers-local-count">0</span> chicks</p>
                        <p><strong>Broilers (Exotic):</strong> <span id="broilers-exotic-count">0</span> chicks</p>
                    </div>
                </div>
            </div>

            <div class="table-container">
                <div class="table-header">
                    <h3>Current Chick Inventory</h3>
                    <button class="btn btn-secondary" onclick="exportStockCSV()">Export CSV</button>
                </div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Batch ID</th>
                            <th>Type</th>
                            <th>Quantity</th>
                            <th>Age (Days)</th>
                            <th>Date Added</th>
                            <th>Notes</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="chick-stock-table">
                        <tr>
                            <td colspan="7" style="text-align: center; color: #6c757d;">No stock available</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Feed Management Tab -->
        <div id="feeds" class="content">
            <div class="alert alert-info">
                <strong>Feed Stock Management</strong> - Manage feed inventory and allocations
            </div>

            <div class="cards-grid">
                <div class="card">
                    <h3>üåæ Add Feed Stock</h3>
                    <form id="feed-stock-form">
                        <div class="form-group">
                            <label>Feed Type</label>
                            <select id="feed-type" required>
                                <option value="">Select Feed Type</option>
                                <option value="starter">Starter Feed (0-6 weeks)</option>
                                <option value="grower">Grower Feed (7-18 weeks)</option>
                                <option value="layer">Layer Feed (18+ weeks)</option>
                                <option value="broiler-starter">Broiler Starter (0-3 weeks)</option>
                                <option value="broiler-finisher">Broiler Finisher (4+ weeks)</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Number of Bags</label>
                            <input type="number" id="feed-bags" min="1" required>
                        </div>
                        <div class="form-group">
                            <label>Weight per Bag (kg)</label>
                            <input type="number" id="feed-weight" min="1" value="50" required>
                        </div>
                        <div class="form-group">
                            <label>Supplier</label>
                            <input type="text" id="feed-supplier" placeholder="Feed supplier name">
                        </div>
                        <div class="form-group">
                            <label>Expiry Date</label>
                            <input type="date" id="feed-expiry" required>
                        </div>
                        <button type="submit" class="btn">Add Feed Stock</button>
                    </form>
                </div>

                <div class="card">
                    <h3>üìà Feed Summary</h3>
                    <div id="feed-summary">
                        <p><strong>Total Bags:</strong> <span id="total-feed-bags-display">0</span></p>
                        <p><strong>Allocated Bags:</strong> <span id="allocated-bags">0</span></p>
                        <p><strong>Available Bags:</strong> <span id="available-bags">0</span></p>
                        <p><strong>Farmers with Pending Feed:</strong> <span id="pending-feed-farmers">0</span></p>
                    </div>
                    
                    <div class="feed-allocation">
                        <h4>üìã Feed Allocation Policy</h4>
                        <p>‚Ä¢ Each farmer gets 2 bags of feed</p>
                        <p>‚Ä¢ Payment due after 2 months</p>
                        <p>‚Ä¢ Automatic allocation with chick approval</p>
                    </div>
                </div>
            </div>

            <div class="table-container">
                <div class="table-header">
                    <h3>Feed Inventory</h3>
                    <button class="btn btn-secondary" onclick="exportFeedCSV()">Export CSV</button>
                </div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Feed ID</th>
                            <th>Type</th>
                            <th>Bags Available</th>
                            <th>Weight/Bag (kg)</th>
                            <th>Supplier</th>
                            <th>Date Added</th>
                            <th>Expiry Date</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody id="feed-stock-table">
                        <tr>
                            <td colspan="8" style="text-align: center; color: #6c757d;">No feed stock available</td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <div class="table-container">
                <div class="table-header">
                    <h3>Feed Allocations</h3>
                    <button class="btn btn-secondary" onclick="exportFeedAllocationsCSV()">Export CSV</button>
                </div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Farmer Name</th>
                            <th>Phone</th>
                            <th>Bags Allocated</th>
                            <th>Feed Type</th>
                            <th>Allocation Date</th>
                            <th>Payment Due Date</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody id="feed-allocations-table">
                        <tr>
                            <td colspan="7" style="text-align: center; color: #6c757d;">No feed allocations yet</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Farmers Tab -->
        <div id="farmers" class="content">
            <div class="alert alert-info">
                <strong>Farmer Management</strong> - View all farmers and their transaction history
            </div>

            <div class="table-container">
                <div class="table-header">
                    <h3>All Registered Farmers</h3>
                    <button class="btn btn-secondary" onclick="exportFarmersCSV()">Export CSV</button>
                </div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Farmer Name</th>
                            <th>Phone</th>
                            <th>Type</th>
                            <th>Total Chicks</th>
                            <th>Total Spent (UGX)</th>
                            <th>Feed Bags</th>
                            <th>Last Purchase</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody id="farmers-table">
                        <tr>
                            <td colspan="8" style="text-align: center; color: #6c757d;">No farmers registered yet</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Reports Tab -->
        <div id="reports" class="content">
            <div class="alert alert-info">
                <strong>Reports & Analytics</strong> - Generate and export detailed reports
            </div>

            <div class="report-filters">
                <h3>üìä Generate Reports</h3>
                <div class="filters-grid">
                    <div class="form-group">
                        <label>Report Type</label>
                        <select id="report-type">
                            <option value="sales">Sales Report</option>
                            <option value="inventory">Inventory Report</option>
                            <option value="farmers">Farmers Report</option>
                            <option value="feed">Feed Report</option>
                            <option value="financial">Financial Summary</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Start Date</label>
                        <input type="date" id="report-start-date">
                    </div>
                    <div class="form-group">
                        <label>End Date</label>
                        <input type="date" id="report-end-date">
                    </div>
                    <div class="form-group">
                        <label>Status Filter</label>
                        <select id="report-status">
                            <option value="all">All Statuses</option>
                            <option value="completed">Completed Only</option>
                            <option value="pending">Pending Only</option>
                            <option value="approved">Approved Only</option>
                        </select>
                    </div>
                </div>
                <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                    <button class="btn" onclick="generateReport()">Generate Report</button>
                    <button class="btn btn-success" onclick="exportFilteredReport()">Export to CSV</button>
                    <button class="btn btn-warning" onclick="exportAllData()">Export All Data</button>
                </div>
            </div>

            <div class="cards-grid">
                <div class="card">
                    <h3>üí∞ Financial Summary</h3>
                    <div id="financial-summary">
                        <p><strong>Total Revenue:</strong> UGX <span id="total-revenue">0</span></p>
                        <p><strong>This Month:</strong> UGX <span id="monthly-revenue-display">0</span></p>
                        <p><strong>Chicks Sold:</strong> <span id="total-chicks-sold">0</span></p>
                        <p><strong>Average Order Value:</strong> UGX <span id="avg-order-value">0</span></p>
                    </div>
                </div>

                <div class="card">
                    <h3>üìà Performance Metrics</h3>
                    <div id="performance-metrics">
                        <p><strong>Active Farmers:</strong> <span id="active-farmers">0</span></p>
                        <p><strong>New Farmers (This Month):</strong> <span id="new-farmers">0</span></p>
                        <p><strong>Stock Turnover:</strong> <span id="stock-turnover">0</span>%</p>
                        <p><strong>Request Approval Rate:</strong> <span id="approval-rate">0</span>%</p>
                    </div>
                </div>
            </div>

            <div class="table-container">
                <div class="table-header">
                    <h3 id="report-title">Generated Report</h3>
                </div>
                <div id="report-content" style="padding: 20px;">
                    <p style="color: #6c757d;">Select filters and click "Generate Report" to view data</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Data storage
        let chickStock = [];
        let feedStock = [];
        let requests = [];
        let farmers = {};
        let feedAllocations = [];
        let requestCounter = 1;
        let stockCounter = 1;
        let feedCounter = 1;

        // Initialize sample data
        function initializeData() {
            // Sample chick stock
            chickStock = [
                { id: 'CS001', type: 'layers-local', quantity: 200, age: 5, dateAdded: '2025-08-15', notes: 'Healthy batch from local supplier' },
                { id: 'CS002', type: 'broilers-exotic', quantity: 150, age: 3, dateAdded: '2025-08-16', notes: 'Premium quality from Kenya' }
            ];

            // Sample feed stock
            feedStock = [
                { id: 'FS001', type: 'starter', bags: 100, weight: 50, supplier: 'UgaFeeds Ltd', dateAdded: '2025-08-10', expiry: '2025-12-10', status: 'available' },
                { id: 'FS002', type: 'grower', bags: 80, weight: 50, supplier: 'Quality Feeds', dateAdded: '2025-08-12', expiry: '2025-11-15', status: 'available' }
            ];

            // Sample requests
            requests = [
                { id: 'REQ001', farmerName: 'John Mukasa', farmerPhone: '0772123456', farmerType: 'starter', chickType: 'layers-local', quantity: 50, status: 'pending', date: '2025-08-17', timestamp: new Date('2025-08-17') },
                { id: 'REQ002', farmerName: 'Sarah Nambi', farmerPhone: '0703987654', farmerType: 'returning', chickType: 'broilers-exotic', quantity: 200, status: 'approved', date: '2025-08-16', timestamp: new Date('2025-08-16') }
            ];

            // Sample farmers
            farmers = {
                '0703987654': {
                    name: 'Sarah Nambi',
                    phone: '0703987654',
                    type: 'returning',
                    totalChicks: 200,
                    totalSpent: 330000,
                    feedBags: 2,
                    lastPurchase: '2025-08-16',
                    orders: [
                        { id: 'REQ002', type: 'broilers-exotic', quantity: 200, cost: 330000, date: '2025-08-16', status: 'completed' }
                    ]
                }
            };

            updateAllDisplays();
        }

        // Tab management
        function showTab(tabName) {
            // Hide all content
            document.querySelectorAll('.content').forEach(content => {
                content.classList.remove('active');
            });
            
            // Remove active from all tabs
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Show selected content
            document.getElementById(tabName).classList.add('active');
            
            // Add active to clicked tab
            event.target.classList.add('active');
            
            // Update displays when switching tabs
            updateAllDisplays();
        }

        // Add new chick stock
        document.getElementById('chick-stock-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const type = document.getElementById('chick-type').value;
            const quantity = parseInt(document.getElementById('chick-quantity').value);
            const age = parseInt(document.getElementById('chick-age').value);
            const notes = document.getElementById('chick-notes').value;
            
            const newStock = {
                id: 'CS' + String(stockCounter).padStart(3, '0'),
                type: type,
                quantity: quantity,
                age: age,
                dateAdded: new Date().toISOString().split('T')[0],
                notes: notes || 'No notes'
            };
            
            chickStock.push(newStock);
            stockCounter++;
            
            updateAllDisplays();
            this.reset();
            
            showAlert('success', `Successfully added ${quantity} ${type.replace('-', ' ')} chicks to stock!`);
        });

        // Add new feed stock
        document.getElementById('feed-stock-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const type = document.getElementById('feed-type').value;
            const bags = parseInt(document.getElementById('feed-bags').value);
            const weight = parseInt(document.getElementById('feed-weight').value);
            const supplier = document.getElementById('feed-supplier').value;
            const expiry = document.getElementById('feed-expiry').value;
            
            const newFeed = {
                id: 'FS' + String(feedCounter).padStart(3, '0'),
                type: type,
                bags: bags,
                weight: weight,
                supplier: supplier || 'Unknown',
                dateAdded: new Date().toISOString().split('T')[0],
                expiry: expiry,
                status: 'available'
            };
            
            feedStock.push(newFeed);
            feedCounter++;
            
            updateAllDisplays();
            this.reset();
            
            showAlert('success', `Successfully added ${bags} bags of ${type} feed to inventory!`);
        });

        // Approve chick request
        function approveRequest(requestId) {
            const request = requests.find(r => r.id === requestId);
            if (!request) return;
            
            // Check stock availability
            const availableStock = chickStock.find(s => s.type === request.chickType && s.quantity >= request.quantity);
            if (!availableStock) {
                showAlert('error', 'Insufficient chick stock for this request!');
                return;
            }
            
            // Check feed availability
            const totalFeedBags = feedStock.reduce((total, feed) => total + feed.bags, 0);
            if (totalFeedBags < 2) {
                showAlert('warning', 'Insufficient feed stock! Request approved but feed allocation pending.');
            }
            
            // Reduce chick stock
            availableStock.quantity -= request.quantity;
            if (availableStock.quantity === 0) {
                chickStock = chickStock.filter(s => s.id !== availableStock.id);
            }
            
            // Update request status
            request.status = 'approved';
            request.approvedDate = new Date().toISOString().split('T')[0];
            
            // Create or update farmer record
            if (!farmers[request.farmerPhone]) {
                farmers[request.farmerPhone] = {
                    name: request.farmerName,
                    phone: request.farmerPhone,
                    type: request.farmerType,
                    totalChicks: 0,
                    totalSpent: 0,
                    feedBags: 0,
                    orders: []
                };
            }
            
            const farmer = farmers[request.farmerPhone];
            farmer.totalChicks += request.quantity;
            farmer.totalSpent += request.quantity * 1650;
            farmer.lastPurchase = new Date().toISOString().split('T')[0];
            farmer.orders.push({
                id: request.id,
                type: request.chickType,
                quantity: request.quantity,
                cost: request.quantity * 1650,
                date: request.date,
                status: 'approved'
            });
            
            // Allocate feed (2 bags per farmer)
            allocateFeedToFarmer(request.farmerPhone, request.farmerName);
            
            updateAllDisplays();
            showAlert('success', `Request ${requestId} approved successfully! Chicks and feed allocated.`);
        }

        // Cancel request
        function cancelRequest(requestId, reason = 'Cancelled by manager') {
            const request = requests.find(r => r.id === requestId);
            if (!request) return;
            
            request.status = 'cancelled';
            request.cancelledDate = new Date().toISOString().split('T')[0];
            request.cancelReason = reason;
            
            updateAllDisplays();
            showAlert('warning', `Request ${requestId} has been cancelled.`);
        }

        // Complete sale
        function completeSale(requestId) {
            const request = requests.find(r => r.id === requestId);
            if (!request) return;
            
            request.status = 'completed';
            request.completedDate = new Date().toISOString().split('T')[0];
            
            // Update farmer order status
            const farmer = farmers[request.farmerPhone];
            if (farmer) {
                const order = farmer.orders.find(o => o.id === requestId);
                if (order) order.status = 'completed';
            }
            
            updateAllDisplays();
            showAlert('success', `Sale ${requestId} completed successfully!`);
        }

        // Allocate feed to farmer
        function allocateFeedToFarmer(farmerPhone, farmerName) {
            const farmer = farmers[farmerPhone];
            if (!farmer) return;
            
            // Find available feed
            const availableFeed = feedStock.find(feed => feed.bags >= 2);
            if (!availableFeed) return;
            
            // Reduce feed stock
            availableFeed.bags -= 2;
            if (availableFeed.bags === 0) {
                feedStock = feedStock.filter(f => f.id !== availableFeed.id);
            }
            
            // Record feed allocation
            const allocation = {
                farmerName: farmerName,
                farmerPhone: farmerPhone,
                bagsAllocated: 2,
                feedType: availableFeed.type,
                allocationDate: new Date().toISOString().split('T')[0],
                paymentDueDate: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 60 days later
                status: 'allocated'
            };
            
            feedAllocations.push(allocation);
            farmer.feedBags += 2;
        }

        // Remove stock item
        function removeStock(stockId, type) {
            if (type === 'chick') {
                chickStock = chickStock.filter(s => s.id !== stockId);
                showAlert('success', 'Chick stock removed successfully!');
            } else if (type === 'feed') {
                feedStock = feedStock.filter(f => f.id !== stockId);
                showAlert('success', 'Feed stock removed successfully!');
            }
            updateAllDisplays();
        }

        // Update all displays
        function updateAllDisplays() {
            updateDashboardStats();
            updateStockSummary();
            updateChickStockTable();
            updateFeedStockTable();
            updateRequestsTable();
            updatePendingRequests();
            updateFarmersTable();
            updateFeedAllocationsTable();
            updateFeedSummary();
            updateFinancialSummary();
            updateRecentActivity();
            updateLowStockAlerts();
        }

        // Update dashboard statistics
        function updateDashboardStats() {
            const totalChicks = chickStock.reduce((sum, stock) => sum + stock.quantity, 0);
            const totalFeedBags = feedStock.reduce((sum, feed) => sum + feed.bags, 0);
            const pendingCount = requests.filter(r => r.status === 'pending').length;
            const totalFarmersCount = Object.keys(farmers).length;
            const monthlyRev = Object.values(farmers).reduce((sum, farmer) => sum + farmer.totalSpent, 0);
            
            document.getElementById('total-chick-stock').textContent = totalChicks;
            document.getElementById('total-feed-bags').textContent = totalFeedBags;
            document.getElementById('pending-requests-count').textContent = pendingCount;
            document.getElementById('total-farmers').textContent = totalFarmersCount;
            document.getElementById('monthly-revenue').textContent = monthlyRev.toLocaleString();
        }

        // Update stock summary
        function updateStockSummary() {
            const summary = {
                'layers-local': 0,
                'layers-exotic': 0,
                'broilers-local': 0,
                'broilers-exotic': 0
            };
            
            chickStock.forEach(stock => {
                summary[stock.type] += stock.quantity;
            });
            
            document.getElementById('layers-local-count').textContent = summary['layers-local'];
            document.getElementById('layers-exotic-count').textContent = summary['layers-exotic'];
            document.getElementById('broilers-local-count').textContent = summary['broilers-local'];
            document.getElementById('broilers-exotic-count').textContent = summary['broilers-exotic'];
        }

        // Update chick stock table
        function updateChickStockTable() {
            const table = document.getElementById('chick-stock-table');
            table.innerHTML = '';
            
            if (chickStock.length === 0) {
                table.innerHTML = '<tr><td colspan="7" style="text-align: center; color: #6c757d;">No stock available</td></tr>';
                return;
            }
            
            chickStock.forEach(stock => {
                const row = table.insertRow();
                row.innerHTML = `
                    <td>${stock.id}</td>
                    <td>${stock.type.replace('-', ' ').toUpperCase()}</td>
                    <td>${stock.quantity}</td>
                    <td>${stock.age}</td>
                    <td>${stock.dateAdded}</td>
                    <td>${stock.notes}</td>
                    <td><button class="btn btn-danger" onclick="removeStock('${stock.id}', 'chick')">Remove</button></td>
                `;
            });
        }

        // Update feed stock table
        function updateFeedStockTable() {
            const table = document.getElementById('feed-stock-table');
            table.innerHTML = '';
            
            if (feedStock.length === 0) {
                table.innerHTML = '<tr><td colspan="8" style="text-align: center; color: #6c757d;">No feed stock available</td></tr>';
                return;
            }
            
            feedStock.forEach(feed => {
                const row = table.insertRow();
                const statusClass = new Date(feed.expiry) < new Date() ? 'status-cancelled' : 'status-approved';
                const statusText = new Date(feed.expiry) < new Date() ? 'Expired' : 'Available';
                
                row.innerHTML = `
                    <td>${feed.id}</td>
                    <td>${feed.type.replace('-', ' ').toUpperCase()}</td>
                    <td>${feed.bags}</td>
                    <td>${feed.weight}</td>
                    <td>${feed.supplier}</td>
                    <td>${feed.dateAdded}</td>
                    <td>${feed.expiry}</td>
                    <td><span class="status-badge ${statusClass}">${statusText}</span></td>
                `;
            });
        }

        // Update requests table
        function updateRequestsTable() {
            const table = document.getElementById('requests-table');
            table.innerHTML = '';
            
            if (requests.length === 0) {
                table.innerHTML = '<tr><td colspan="9" style="text-align: center; color: #6c757d;">No requests found</td></tr>';
                return;
            }
            
            requests.forEach(request => {
                const row = table.insertRow();
                let actions = '';
                
                if (request.status === 'pending') {
                    actions = `
                        <button class="btn btn-success" onclick="approveRequest('${request.id}')">Approve</button>
                        <button class="btn btn-danger" onclick="cancelRequest('${request.id}')">Cancel</button>
                    `;
                } else if (request.status === 'approved') {
                    actions = `<button class="btn btn-warning" onclick="completeSale('${request.id}')">Complete Sale</button>`;
                } else {
                    actions = `<span class="status-badge status-${request.status}">${request.status.toUpperCase()}</span>`;
                }
                
                row.innerHTML = `
                    <td>${request.id}</td>
                    <td>${request.farmerName}</td>
                    <td>${request.farmerPhone}</td>
                    <td>${request.farmerType}</td>
                    <td>${request.chickType.replace('-', ' ').toUpperCase()}</td>
                    <td>${request.quantity}</td>
                    <td><span class="status-badge status-${request.status}">${request.status.toUpperCase()}</span></td>
                    <td>${request.date}</td>
                    <td>${actions}</td>
                `;
            });
        }

        // Update pending requests
        function updatePendingRequests() {
            const container = document.getElementById('pending-requests-list');
            const pendingRequests = requests.filter(r => r.status === 'pending');
            
            if (pendingRequests.length === 0) {
                container.innerHTML = '<p style="color: #6c757d;">No pending requests</p>';
                return;
            }
            
            container.innerHTML = pendingRequests.map(request => `
                <div class="pending-request">
                    <h4>${request.farmerName} - ${request.id}</h4>
                    <p><strong>Phone:</strong> ${request.farmerPhone}</p>
                    <p><strong>Type:</strong> ${request.farmerType} farmer</p>
                    <p><strong>Request:</strong> ${request.quantity} ${request.chickType.replace('-', ' ')} chicks</p>
                    <p><strong>Total Cost:</strong> UGX ${(request.quantity * 1650).toLocaleString()}</p>
                    <div class="actions">
                        <button class="btn btn-success" onclick="approveRequest('${request.id}')">‚úì Approve</button>
                        <button class="btn btn-danger" onclick="cancelRequest('${request.id}')">‚úó Cancel</button>
                    </div>
                </div>
            `).join('');
        }

        // Update farmers table
        function updateFarmersTable() {
            const table = document.getElementById('farmers-table');
            table.innerHTML = '';
            
            const farmersList = Object.values(farmers);
            if (farmersList.length === 0) {
                table.innerHTML = '<tr><td colspan="8" style="text-align: center; color: #6c757d;">No farmers registered yet</td></tr>';
                return;
            }
            
            farmersList.forEach(farmer => {
                const row = table.insertRow();
                row.innerHTML = `
                    <td>${farmer.name}</td>
                    <td>${farmer.phone}</td>
                    <td>${farmer.type}</td>
                    <td>${farmer.totalChicks}</td>
                    <td>${farmer.totalSpent.toLocaleString()}</td>
                    <td>${farmer.feedBags || 0}</td>
                    <td>${farmer.lastPurchase || 'Never'}</td>
                    <td><span class="status-badge status-approved">Active</span></td>
                `;
            });
        }

        // Update feed allocations table
        function updateFeedAllocationsTable() {
            const table = document.getElementById('feed-allocations-table');
            table.innerHTML = '';
            
            if (feedAllocations.length === 0) {
                table.innerHTML = '<tr><td colspan="7" style="text-align: center; color: #6c757d;">No feed allocations yet</td></tr>';
                return;
            }
            
            feedAllocations.forEach(allocation => {
                const row = table.insertRow();
                row.innerHTML = `
                    <td>${allocation.farmerName}</td>
                    <td>${allocation.farmerPhone}</td>
                    <td>${allocation.bagsAllocated}</td>
                    <td>${allocation.feedType.replace('-', ' ').toUpperCase()}</td>
                    <td>${allocation.allocationDate}</td>
                    <td>${allocation.paymentDueDate}</td>
                    <td><span class="status-badge status-approved">${allocation.status}</span></td>
                `;
            });
        }

        // Update feed summary
        function updateFeedSummary() {
            const totalBags = feedStock.reduce((sum, feed) => sum + feed.bags, 0);
            const allocatedBags = feedAllocations.reduce((sum, allocation) => sum + allocation.bagsAllocated, 0);
            const availableBags = totalBags;
            const pendingFeedFarmers = feedAllocations.filter(a => a.status === 'allocated').length;
            
            document.getElementById('total-feed-bags-display').textContent = totalBags;
            document.getElementById('allocated-bags').textContent = allocatedBags;
            document.getElementById('available-bags').textContent = availableBags;
            document.getElementById('pending-feed-farmers').textContent = pendingFeedFarmers;
        }

        // Update financial summary
        function updateFinancialSummary() {
            const totalRevenue = Object.values(farmers).reduce((sum, farmer) => sum + farmer.totalSpent, 0);
            const monthlyRevenue = totalRevenue; // Simplified for demo
            const totalChicksSold = Object.values(farmers).reduce((sum, farmer) => sum + farmer.totalChicks, 0);
            const avgOrderValue = totalChicksSold > 0 ? Math.round(totalRevenue / Object.keys(farmers).length) : 0;
            
            document.getElementById('total-revenue').textContent = totalRevenue.toLocaleString();
            document.getElementById('monthly-revenue-display').textContent = monthlyRevenue.toLocaleString();
            document.getElementById('total-chicks-sold').textContent = totalChicksSold;
            document.getElementById('avg-order-value').textContent = avgOrderValue.toLocaleString();
            
            // Performance metrics
            document.getElementById('active-farmers').textContent = Object.keys(farmers).length;
            document.getElementById('new-farmers').textContent = Object.keys(farmers).length; // Simplified
            document.getElementById('stock-turnover').textContent = '85'; // Simplified
            document.getElementById('approval-rate').textContent = Math.round((requests.filter(r => r.status === 'approved' || r.status === 'completed').length / requests.length) * 100) || 0;
        }

        // Update recent activity
        function updateRecentActivity() {
            const container = document.getElementById('recent-activity');
            const recentItems = [];
            
            // Add recent requests
            requests.slice(-3).forEach(request => {
                recentItems.push(`${request.date}: ${request.farmerName} requested ${request.quantity} ${request.chickType} chicks - ${request.status}`);
            });
            
            if (recentItems.length === 0) {
                container.innerHTML = '<p style="color: #6c757d;">No recent activity</p>';
            } else {
                container.innerHTML = recentItems.map(item => `<p style="margin-bottom: 8px;">‚Ä¢ ${item}</p>`).join('');
            }
        }

        // Update low stock alerts
        function updateLowStockAlerts() {
            const container = document.getElementById('low-stock-alerts');
            const alerts = [];
            
            // Check chick stock
            chickStock.forEach(stock => {
                if (stock.quantity < 50) {
                    alerts.push(`Low chick stock: ${stock.type} - Only ${stock.quantity} remaining`);
                }
            });
            
            // Check feed stock
            feedStock.forEach(feed => {
                if (feed.bags < 10) {
                    alerts.push(`Low feed stock: ${feed.type} - Only ${feed.bags} bags remaining`);
                }
                
                // Check expiry
                const daysUntilExpiry = Math.ceil((new Date(feed.expiry) - new Date()) / (1000 * 60 * 60 * 24));
                if (daysUntilExpiry < 30 && daysUntilExpiry > 0) {
                    alerts.push(`Feed expiring soon: ${feed.type} - Expires in ${daysUntilExpiry} days`);
                }
            });
            
            if (alerts.length === 0) {
                container.innerHTML = '<p style="color: #6c757d;">All stock levels normal</p>';
            } else {
                container.innerHTML = alerts.map(alert => `<p style="margin-bottom: 8px; color: #dc3545;">‚ö†Ô∏è ${alert}</p>`).join('');
            }
        }

        // Show alert function
        function showAlert(type, message) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type === 'error' ? 'danger' : type}`;
            alertDiv.style.position = 'fixed';
            alertDiv.style.top = '20px';
            alertDiv.style.right = '20px';
            alertDiv.style.zIndex = '1000';
            alertDiv.style.minWidth = '300px';
            alertDiv.innerHTML = message;
            
            document.body.appendChild(alertDiv);
            
            setTimeout(() => {
                alertDiv.remove();
            }, 5000);
        }

        // CSV Export Functions
        function exportRequestsCSV() {
            const headers = ['Request ID', 'Farmer Name', 'Phone', 'Farmer Type', 'Chick Type', 'Quantity', 'Status', 'Date', 'Total Cost'];
            const data = requests.map(request => [
                request.id,
                request.farmerName,
                request.farmerPhone,
                request.farmerType,
                request.chickType,
                request.quantity,
                request.status,
                request.date,
                request.quantity * 1650
            ]);
            
            downloadCSV([headers, ...data], 'chick_requests.csv');
        }

        function exportStockCSV() {
            const headers = ['Stock ID', 'Type', 'Quantity', 'Age (Days)', 'Date Added', 'Notes'];
            const data = chickStock.map(stock => [
                stock.id,
                stock.type,
                stock.quantity,
                stock.age,
                stock.dateAdded,
                stock.notes
            ]);
            
            downloadCSV([headers, ...data], 'chick_inventory.csv');
        }

        function exportFeedCSV() {
            const headers = ['Feed ID', 'Type', 'Bags', 'Weight per Bag', 'Supplier', 'Date Added', 'Expiry Date', 'Status'];
            const data = feedStock.map(feed => [
                feed.id,
                feed.type,
                feed.bags,
                feed.weight,
                feed.supplier,
                feed.dateAdded,
                feed.expiry,
                feed.status
            ]);
            
            downloadCSV([headers, ...data], 'feed_inventory.csv');
        }

        function exportFeedAllocationsCSV() {
            const headers = ['Farmer Name', 'Phone', 'Bags Allocated', 'Feed Type', 'Allocation Date', 'Payment Due Date', 'Status'];
            const data = feedAllocations.map(allocation => [
                allocation.farmerName,
                allocation.farmerPhone,
                allocation.bagsAllocated,
                allocation.feedType,
                allocation.allocationDate,
                allocation.paymentDueDate,
                allocation.status
            ]);
            
            downloadCSV([headers, ...data], 'feed_allocations.csv');
        }

        function exportFarmersCSV() {
            const headers = ['Farmer Name', 'Phone', 'Type', 'Total Chicks', 'Total Spent', 'Feed Bags', 'Last Purchase'];
            const data = Object.values(farmers).map(farmer => [
                farmer.name,
                farmer.phone,
                farmer.type,
                farmer.totalChicks,
                farmer.totalSpent,
                farmer.feedBags || 0,
                farmer.lastPurchase || 'Never'
            ]);
            
            downloadCSV([headers, ...data], 'farmers_list.csv');
        }

        function generateReport() {
            const reportType = document.getElementById('report-type').value;
            const startDate = document.getElementById('report-start-date').value;
            const endDate = document.getElementById('report-end-date').value;
            const status = document.getElementById('report-status').value;
            
            let reportData = [];
            let reportTitle = '';
            
            switch (reportType) {
                case 'sales':
                    reportTitle = 'Sales Report';
                    reportData = requests.filter(r => {
                        if (status !== 'all' && r.status !== status) return false;
                        if (startDate && r.date < startDate) return false;
                        if (endDate && r.date > endDate) return false;
                        return true;
                    });
                    break;
                case 'inventory':
                    reportTitle = 'Inventory Report';
                    reportData = [...chickStock, ...feedStock];
                    break;
                case 'farmers':
                    reportTitle = 'Farmers Report';
                    reportData = Object.values(farmers);
                    break;
                case 'feed':
                    reportTitle = 'Feed Report';
                    reportData = feedAllocations;
                    break;
                case 'financial':
                    reportTitle = 'Financial Summary Report';
                    reportData = Object.values(farmers).map(farmer => ({
                        name: farmer.name,
                        phone: farmer.phone,
                        totalSpent: farmer.totalSpent,
                        totalChicks: farmer.totalChicks
                    }));
                    break;
            }
            
            document.getElementById('report-title').textContent = reportTitle;
            
            if (reportData.length === 0) {
                document.getElementById('report-content').innerHTML = '<p style="color: #6c757d;">No data found for the selected criteria</p>';
            } else {
                const table = createReportTable(reportData, reportType);
                document.getElementById('report-content').innerHTML = table;
            }
        }

        function createReportTable(data, type) {
            if (!data || data.length === 0) return '<p>No data available</p>';
            
            let headers = [];
            let rows = [];
            
            switch (type) {
                case 'sales':
                    headers = ['Request ID', 'Farmer', 'Phone', 'Type', 'Quantity', 'Total (UGX)', 'Status', 'Date'];
                    rows = data.map(item => [
                        item.id,
                        item.farmerName,
                        item.farmerPhone,
                        item.chickType,
                        item.quantity,
                        (item.quantity * 1650).toLocaleString(),
                        item.status,
                        item.date
                    ]);
                    break;
                case 'farmers':
                    headers = ['Name', 'Phone', 'Type', 'Chicks Bought', 'Total Spent (UGX)', 'Feed Bags', 'Last Purchase'];
                    rows = data.map(item => [
                        item.name,
                        item.phone,
                        item.type,
                        item.totalChicks,
                        item.totalSpent.toLocaleString(),
                        item.feedBags || 0,
                        item.lastPurchase || 'Never'
                    ]);
                    break;
                case 'financial':
                    headers = ['Farmer', 'Phone', 'Chicks Purchased', 'Revenue (UGX)'];
                    rows = data.map(item => [
                        item.name,
                        item.phone,
                        item.totalChicks,
                        item.totalSpent.toLocaleString()
                    ]);
                    break;
                default:
                    headers = Object.keys(data[0]);
                    rows = data.map(item => Object.values(item));
            }
            
            let table = '<table class="table"><thead><tr>';
            headers.forEach(header => {
                table += `<th>${header}